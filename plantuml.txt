@startuml

skinparam linetype polyline
skinparam linetype ortho

Object <|-- Bait
Object <|-- Ranger
Object <|-- Structure
Object <|-- Trap
Object <|-- Entity

Entity <|-- Enemy
Mortal <|-- Enemy
Walker <|-- Enemy
Damager <|-- Enemy

Entity <|-- Trap
Defender <|-- Trap
Damager <|-- Trap

Entity <|-- Bait
Defender <|-- Bait
Mortal <|-- Bait

Entity <|-- Ranger
Defender <|-- Ranger
Damager <|-- Ranger
Shooter <|-- Ranger

Entity <|-- Structure
Defender <|-- Structure
Mortal <|-- Structure

Object <|-- Tile


abstract Object {
 # id
}

abstract Entity {
 # int x
 # int y
}

abstract Damager {
 # float dmg
}

abstract Mortal {
 # float hp
}

abstract Walker {
 # int[][] path
 # int lenOfPath

 + void makeStep()
 + void claculatePath()
 + void displayPath()
}

abstract Shooter {
 # float range
 # int bullets

 + bool checkBullets()
}

interface Defender {
 + int trigger()
}

class Enemy {
 # float reward
}

class Trap {
 # int type
 # bool armed
}

class Bait {}

class Ranger {}

class Structure {}

class Tile {
 + bool occupied
 + bool trail
}


Data *-- Generator
Data -- Logic
Data -- Graphics
Logic -- Graphics

Data "1" *-- "0..*" Bait
Data "1" *-- "0..*" Ranger
Data "1" *-- "1" Structure
Data "1" *-- "1..4" Enemy
Data "1" *-- "0..*" Trap
Data "1" *-- "256" Tile

Object <|-- Data
Object <|-- Generator
Object <|-- Graphics
Object <|-- Logic


class Generator {
 - tile1[8][8]
 - tile2[8][8]
 - tile3[8][8]
 - tile4[8][8]

 + field[16][16]

 + void setupTiles()
 + void drawTiles()

 + void generateField()
 + void drawField()
}

class Data {
 .. STATS ..
 - int round
 - float money
 - int phase
 - bool abort
 - int kills

 .. PRICES ..
 - float beartrap
 - float nest
 - float ranger

 .. ACTORS ..
 + int dim
 + int nE
 + int nT
 + int nR
 + int nB

 .. OTHERS ..
 + int *fieldSchema
 + int spawns[4][2]

 + void addTrap()
 + void addRanger()
 + void addBait()
 + void addFence()

 + int sellDefender()

 + void setupField()

 + bool checkTrail()
 + bool checkOcc()

 + bool checkMoney()
}

class Logic {
 + void addEnemies()

 + void enemiesMove()
 + void defendersMove()
 + void checkFinish()

 + void setupSpawns()
 + void constructSchema()
 + void calculatePaths()

 + bool checkGO()

 + char *fieldStateSchema
}

class Graphics {
 + void printPhase()
 + void printStats()
 + void printFinalStats()

 + int drawState()
 + void displayPaths()

 + void printOptionsMain()
 + void printOptionsBuy()
 + void printOptionsSell()
}

@enduml
